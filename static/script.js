// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ API)
let appConfig = null;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function loadConfig() {
    try {
        const response = await fetch('/api/config');
        appConfig = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–∞–¥–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        updateRiddle();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≥–∞–¥–∫–∏
function updateRiddle() {
    if (!appConfig) return;
    
    const riddleContainer = document.getElementById('riddle-container');
    if (riddleContainer) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å <br> –≤ —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        const raw = appConfig.riddle.text || '';
        const parts = raw.split(/<br\s*\/?>(\s*)/i).filter(Boolean);
        riddleContainer.innerHTML = parts
            .map((line) => `<div class="riddle-line golden-text">${line}</div>`) 
            .join('');
    }
}

// –ö–æ–¥–æ–≤—ã–π –∑–∞–º–æ–∫
let digits = [0, 0, 0, 0];

function changeDigit(index, direction) {
    digits[index] += direction;
    if (digits[index] > 9) digits[index] = 0;
    if (digits[index] < 0) digits[index] = 9;
    
    document.getElementById(`digit-${index}`).textContent = digits[index];
    
    // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç (–≤–∏–∑—É–∞–ª—å–Ω—ã–π)
    const digitElement = document.getElementById(`digit-${index}`);
    digitElement.style.transform = 'scale(1.2)';
    setTimeout(() => {
        digitElement.style.transform = 'scale(1)';
    }, 100);
}

function checkCode() {
    if (!appConfig) return;
    
    const enteredCode = digits.join('');
    const errorElement = document.getElementById('lock-error');
    
    if (enteredCode === appConfig.lock_code) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥!
        errorElement.textContent = '';
        const lockScreen = document.getElementById('lock-screen');
        const mainContainer = document.getElementById('main-container');
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è
        lockScreen.style.animation = 'fadeOut 1.5s ease-out';
        setTimeout(() => {
            lockScreen.style.display = 'none';
            // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∞ fade-in –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ (—Å–º. unlocked)
            mainContainer.style.display = 'block';
        }, 1500);
    } else {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
        errorElement.textContent = '‚ö† –í—Ä–∞—Ç–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º–∏ ‚ö†';
        
        // –¢—Ä—è—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const container = document.querySelector('.lock-container');
        container.style.animation = 'shake 0.5s, lockGlow 4s ease-in-out infinite';
        setTimeout(() => {
            container.style.animation = 'lockGlow 4s ease-in-out infinite';
            errorElement.textContent = '';
        }, 2000);
    }
}

function checkAnswer() {
    if (!appConfig) return;
    
    const input = document.getElementById('answer');
    const answer = input.value.trim().toLowerCase();
    const errorMessage = document.getElementById('error-message');
    const questContainer = document.querySelector('.quest-container');
    const secretSection = document.getElementById('secret-section');
    
    if (!answer) {
        errorMessage.textContent = '–ü—É—Å—Ç–æ—Ç–∞ —É–º–∞ –≤–µ–¥—ë—Ç –∫ –ø—É—Å—Ç–æ—Ç–µ –∫–æ—à–µ–ª—å–∫–∞...';
        shakeElement(input);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–∑ API
    if (appConfig.riddle.answers.map(a => a.toLowerCase()).includes(answer)) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!
        errorMessage.textContent = '';
        questContainer.style.animation = 'fadeOut 1s ease-out';
        
        setTimeout(() => {
            questContainer.style.display = 'none';
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω DnD –±–∞–Ω–∫–∞ –∏ –∫–∞—Ä—Ç—É
            const gate = document.getElementById('pentagram-gate');
            gate.classList.remove('hidden');
            // –ö–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–Ω–∞ –¥–ª—è DnD ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∫–∞—Ä—Ç—ã
            const secret = document.getElementById('secret-section');
            secret.classList.remove('hidden');
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª –∫—É–ª—å—Ç–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö
            const cs = document.querySelector('.cult-symbol');
            const warn = document.querySelector('.warning');
            if (cs) cs.style.display = 'none';
            if (warn) warn.style.display = 'none';
            playRevealSound();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∏ DnD
            updateCoordinates();
        // –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
        setTimeout(() => {
            initTreasureMapWithDnD();
        }, 200);
        }, 1000);
        
    } else {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        errorMessage.textContent = '–ù–µ–≤–µ—Ä–Ω–æ... –¢—ã –µ—â—ë –Ω–µ –ø–æ—Å—Ç–∏–≥ –ø—Ä–∏—Ä–æ–¥—É –∏–∑–æ–±–∏–ª–∏—è.';
        shakeElement(input);
        input.value = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –æ—à–∏–±–∫–∏
        document.body.style.animation = 'flashGold 0.5s';
        setTimeout(() => {
            document.body.style.animation = '';
        }, 500);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateCoordinates() {
    if (!appConfig) return;
    
    const coordsElement = document.getElementById('map-coordinates');
    if (coordsElement) {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ—Ä–∂–∏–º —Å–∫—Ä—ã—Ç—ã–º
        coordsElement.classList.add('hidden');
        coordsElement.innerHTML = `üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –•—Ä–∞–º–∞: <span class="coords-highlight">${appConfig.coordinates.display}</span>`;
    }
}

function shakeElement(element) {
    element.style.animation = 'shake 0.5s';
    setTimeout(() => {
        element.style.animation = '';
    }, 500);
}

function playRevealSound() {
    // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤—Å–ø—ã—à–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–µ–∫—Ä–µ—Ç–∞
    const flash = document.createElement('div');
    flash.style.position = 'fixed';
    flash.style.top = '0';
    flash.style.left = '0';
    flash.style.width = '100%';
    flash.style.height = '100%';
    flash.style.background = 'rgba(218, 165, 32, 0.4)';
    flash.style.zIndex = '9999';
    flash.style.pointerEvents = 'none';
    flash.style.animation = 'flashReveal 1s ease-out';
    document.body.appendChild(flash);
    
    setTimeout(() => {
        flash.remove();
    }, 1000);
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter
const answerInputEl = document.getElementById('answer');
if (answerInputEl) {
    answerInputEl.addEventListener('keypress', function(event) {
    if (event.key === 'Enter') {
        checkAnswer();
    }
});
}

// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ CSS —á–µ—Ä–µ–∑ JavaScript
const style = document.createElement('style');
style.textContent = `
    @keyframes fadeOut {
        from { 
            opacity: 1;
            transform: scale(1);
        }
        to { 
            opacity: 0;
            transform: scale(0.9);
        }
    }
    
    @keyframes flashGold {
        0%, 100% { background-color: transparent; }
        50% { background-color: rgba(184, 134, 11, 0.15); }
    }
    
    @keyframes flashReveal {
        0% { opacity: 0; }
        50% { opacity: 1; }
        100% { opacity: 0; }
    }
`;
document.head.appendChild(style);


// –°–æ–∑–¥–∞–µ–º –∂—É—Ç–∫–∏–µ –æ–±—Ä–∞–∑—ã –Ω–∞ —Ñ–æ–Ω–µ
function createHauntingFigures() {
    const container = document.getElementById('haunting-figures');
    
    const figures = [
        // –°–∏–ª—É—ç—Ç —á–µ–ª–æ–≤–µ–∫–∞
        `<svg width="200" height="300" viewBox="0 0 200 300">
            <ellipse cx="100" cy="50" rx="40" ry="50"/>
            <rect x="70" y="100" width="60" height="120" rx="10"/>
            <rect x="40" y="110" width="30" height="80" rx="8" transform="rotate(-20 55 150)"/>
            <rect x="130" y="110" width="30" height="80" rx="8" transform="rotate(20 145 150)"/>
            <rect x="75" y="210" width="20" height="80" rx="5"/>
            <rect x="105" y="210" width="20" height="80" rx="5"/>
        </svg>`,
        
        // –°–∏–ª—É—ç—Ç —Å –≤—ã—Ç—è–Ω—É—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏
        `<svg width="250" height="280" viewBox="0 0 250 280">
            <ellipse cx="125" cy="40" rx="35" ry="45"/>
            <rect x="100" y="85" width="50" height="100" rx="8"/>
            <rect x="30" y="90" width="70" height="15" rx="7" transform="rotate(-10 65 97)"/>
            <rect x="150" y="90" width="70" height="15" rx="7" transform="rotate(10 185 97)"/>
            <rect x="110" y="180" width="15" height="90" rx="7"/>
            <rect x="125" y="180" width="15" height="90" rx="7"/>
        </svg>`,
        
        // –°–∫—Ä—é—á–µ–Ω–Ω–∞—è —Ñ–∏–≥—É—Ä–∞
        `<svg width="180" height="220" viewBox="0 0 180 220">
            <ellipse cx="90" cy="80" rx="35" ry="40"/>
            <path d="M 70 120 Q 50 160 60 200" stroke-width="50" fill="none" stroke="#1a0000"/>
            <rect x="45" y="110" width="25" height="60" rx="12" transform="rotate(-30 57 140)"/>
            <rect x="110" y="110" width="25" height="60" rx="12" transform="rotate(30 122 140)"/>
        </svg>`,
        
        // –í—ã—Å–æ–∫–∞—è —Ç–æ–Ω–∫–∞—è —Ñ–∏–≥—É—Ä–∞
        `<svg width="150" height="350" viewBox="0 0 150 350">
            <ellipse cx="75" cy="45" rx="30" ry="40"/>
            <rect x="60" y="85" width="30" height="180" rx="15"/>
            <rect x="40" y="100" width="20" height="120" rx="10" transform="rotate(-5 50 160)"/>
            <rect x="90" y="100" width="20" height="120" rx="10" transform="rotate(5 100 160)"/>
            <rect x="62" y="260" width="12" height="80" rx="6"/>
            <rect x="76" y="260" width="12" height="80" rx="6"/>
        </svg>`,
        
        // –§–∏–≥—É—Ä–∞ —Å –æ–ø—É—â–µ–Ω–Ω–æ–π –≥–æ–ª–æ–≤–æ–π
        `<svg width="190" height="260" viewBox="0 0 190 260">
            <ellipse cx="95" cy="70" rx="35" ry="42" transform="rotate(15 95 70)"/>
            <rect x="70" y="100" width="50" height="100" rx="10"/>
            <rect x="50" y="115" width="25" height="70" rx="8"/>
            <rect x="115" y="115" width="25" height="70" rx="8"/>
            <rect x="80" y="195" width="15" height="60" rx="5"/>
            <rect x="95" y="195" width="15" height="60" rx="5"/>
        </svg>`,
        
        // –ö–æ–ª–µ–Ω–æ–ø—Ä–µ–∫–ª–æ–Ω–µ–Ω–Ω–∞—è —Ñ–∏–≥—É—Ä–∞
        `<svg width="200" height="240" viewBox="0 0 200 240">
            <ellipse cx="100" cy="50" rx="32" ry="38"/>
            <rect x="78" y="88" width="44" height="80" rx="10"/>
            <rect x="60" y="100" width="22" height="55" rx="8" transform="rotate(-15 71 127)"/>
            <rect x="118" y="100" width="22" height="55" rx="8" transform="rotate(15 129 127)"/>
            <rect x="75" y="160" width="18" height="70" rx="9" transform="rotate(45 84 195)"/>
            <rect x="107" y="160" width="18" height="70" rx="9" transform="rotate(-45 116 195)"/>
        </svg>`
    ];
    
    // –°–æ–∑–¥–∞–µ–º 12 —Ñ–∏–≥—É—Ä –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
    for (let i = 0; i < 12; i++) {
        const figure = document.createElement('div');
        figure.className = 'figure';
        
        const randomFigure = figures[Math.floor(Math.random() * figures.length)];
        figure.innerHTML = randomFigure;
        
        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        const positions = [
            { left: '5%', top: '10%' },
            { left: '15%', top: '60%' },
            { left: '85%', top: '20%' },
            { left: '90%', top: '70%' },
            { left: '10%', top: '80%' },
            { left: '75%', top: '45%' },
            { left: '25%', top: '25%' },
            { left: '60%', top: '15%' },
            { left: '40%', top: '75%' },
            { left: '80%', top: '85%' },
            { left: '20%', top: '40%' },
            { left: '50%', top: '5%' }
        ];
        
        const pos = positions[i];
        figure.style.left = pos.left;
        figure.style.top = pos.top;
        
        // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        figure.style.animationDelay = `${Math.random() * 15}s`;
        
        // –°–ª—É—á–∞–π–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        figure.style.animationDuration = `${12 + Math.random() * 8}s`;
        
        container.appendChild(figure);
    }
}

// –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–µ –ª–æ–≥–æ—Ç–∏–ø—ã –Ω–∞ —Ñ–æ–Ω–µ
function createFloatingLogos() {
    const container = document.getElementById('floating-logos');
    
    const positions = [
        { left: '10%', top: '15%' },
        { left: '85%', top: '25%' },
        { left: '15%', top: '70%' },
        { left: '80%', top: '75%' },
        { left: '50%', top: '10%' },
        { left: '25%', top: '50%' },
        { left: '70%', top: '50%' }
    ];
    
    positions.forEach((pos, index) => {
        const logoDiv = document.createElement('div');
        logoDiv.className = 'floating-logo';
        
        const img = document.createElement('img');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–∞—Ö–æ–¥–∏–ª—Å—è —Ñ–∞–π–ª
        img.src = 'static/–§–ª–∞–≥ –ß–µ—á–µ–≤—É—Ä—ã PDF.png';
        img.alt = '–°–∏–º–≤–æ–ª –†—É–∫–∏ –ì—Ä–æ—Ö–∞';
        
        logoDiv.appendChild(img);
        logoDiv.style.left = pos.left;
        logoDiv.style.top = pos.top;
        logoDiv.style.animationDelay = `${index * 3}s`;
        logoDiv.style.animationDuration = `${18 + Math.random() * 6}s`;
        
        container.appendChild(logoDiv);
    });
}

// –°–æ–∑–¥–∞–µ–º –∑–æ–ª–æ—Ç—ã–µ —á–∞—Å—Ç–∏—Ü—ã
function createGoldParticles() {
    const container = document.getElementById('gold-particles');
    
    // –°–æ–∑–¥–∞—ë–º 40 –∑–æ–ª–æ—Ç—ã—Ö —á–∞—Å—Ç–∏—Ü
    for (let i = 0; i < 40; i++) {
        const particle = document.createElement('div');
        particle.className = 'gold-particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 15 + 's';
        particle.style.animationDuration = (12 + Math.random() * 8) + 's';
        container.appendChild(particle);
    }
    
    // –°–æ–∑–¥–∞—ë–º 60 –º–µ—Ä—Ü–∞—é—â–∏—Ö –∑–≤—ë–∑–¥–æ—á–µ–∫
    for (let i = 0; i < 60; i++) {
        const sparkle = document.createElement('div');
        sparkle.className = 'gold-sparkle';
        sparkle.style.left = Math.random() * 100 + '%';
        sparkle.style.top = Math.random() * 100 + '%';
        sparkle.style.animationDelay = Math.random() * 3 + 's';
        sparkle.style.animationDuration = (2 + Math.random() * 2) + 's';
        container.appendChild(sparkle);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å –º–µ—Ç–∫–æ–π —Å–æ–∫—Ä–æ–≤–∏—â–∞
function initTreasureMap() {
    if (!appConfig) return;
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const targetLat = appConfig.coordinates.lat;
    const targetLng = appConfig.coordinates.lng;
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
    if (window.__leafletMap) {
        // –ö–∞—Ä—Ç–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º —Ä–∞–∑–º–µ—Ä –∏ –≤–µ—Ä–Ω—ë–º —Å—Å—ã–ª–∫—É
        setTimeout(() => window.__leafletMap.invalidateSize(), 50);
        return window.__leafletMap;
    }

    const map = L.map('real-map', {
        center: [targetLat, targetLng],
        zoom: 15,
        zoomControl: false,
        attributionControl: false
    });
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤–∏–¥—ã –∑—É–º–∞/–∂–µ—Å—Ç–æ–≤
    map.scrollWheelZoom.disable();
    map.doubleClickZoom.disable();
    map.touchZoom.disable();
    map.boxZoom.disable();
    map.keyboard.disable();
    map.dragging.disable();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø–µ–Ω—Ç–∞–≥—Ä–∞–º–º—ã
    window.__leafletMap = map;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π OpenStreetMap
    try {
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19
    }).addTo(map);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–æ–≤ OSM:', e);
    }
    
    // –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞—Ä—Ç–∞ –∑–Ω–∞–µ—Ç –æ —Å–≤–æ–∏—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö
    setTimeout(() => map.invalidateSize(), 50);
    // –ù–∞ —ç—Ç–∞–ø–µ DnD ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö—Ä–∞–º –∏ –∫—Ä—É–≥, –æ—Å—Ç–∞–≤–ª—è–µ–º —á–∏—Å—Ç—É—é –∫–∞—Ä—Ç—É

    // –ü–µ–Ω—Ç–∞–≥—Ä–∞–º–º–∞ —á–µ—Ä–µ–∑ DnD: —Ç–æ—á–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä
}

// –£—Ç–∏–ª–∏—Ç–∞: —Å–º–µ—â–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —É–≥–æ–ª (–≤ –º–µ—Ç—Ä–∞—Ö/–≥—Ä–∞–¥—É—Å–∞—Ö)
function offsetLatLng([lat, lng], distanceMeters, bearingDeg) {
    const R = 6378137; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ (–º)
    const dByR = distanceMeters / R;
    const bearing = (bearingDeg * Math.PI) / 180;
    const lat1 = (lat * Math.PI) / 180;
    const lng1 = (lng * Math.PI) / 180;
    const lat2 = Math.asin(
        Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing)
    );
    const lng2 = lng1 + Math.atan2(
        Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),
        Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat2)
    );
    return [(lat2 * 180) / Math.PI, (lng2 * 180) / Math.PI];
}

// –£–¥–∞–ª–µ–Ω–æ: setupPentagramInputs ‚Äî —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä —Å–ª–æ–≤

// –£–¥–∞–ª–µ–Ω–æ: drawPentagramIfReady ‚Äî —Å—Ç–∞—Ä–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–≤–µ–∑–¥—ã –ø–æ –≤–≤–æ–¥—É

// –≠–∫—Ä–∞–Ω –≤—Ä–∞—Ç: –≤–≤–æ–¥ –ø–∞—Ä —Å–ª–æ–≤ ‚Üí –∫–æ–≥–¥–∞ –≤—Å–µ 5 –≤–µ—Ä—à–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É ¬´–û–¢–ö–†–´–¢–¨ –ö–ê–†–¢–£¬ª
// –£–¥–∞–ª–µ–Ω–æ: setupPentagramGate ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

// --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: DnD –Ω–∞ –∫–∞—Ä—Ç–µ ---
function initTreasureMapWithDnD() {
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å–µ–∫—Ü–∏—è –∫–∞—Ä—Ç—ã –≤–∏–¥–∏–º–∞
    const secret = document.getElementById('secret-section');
    if (secret) secret.classList.remove('hidden');

    initTreasureMap();
    const mapContainer = document.getElementById('real-map');
    const slotsLayer = document.getElementById('dnd-slots');
    const bank = document.getElementById('dnd-bank');
    const gate = document.getElementById('pentagram-gate');
    if (gate) gate.classList.remove('hidden');
    if (bank) bank.style.display = 'flex';
    // –ù–∞ —ç—Ç–∞–ø–µ DnD —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç —Å–µ–∫—Ü–∏–∏ "–ü—É—Ç—å –∫ –•—Ä–∞–º—É"
    if (secret) {
        const title = secret.querySelector('h2.revealed-title');
        const desc = secret.querySelector('.map-instruction');
        if (title) title.style.display = 'none';
        if (desc) desc.style.display = 'none';
    }
    // –ù–∞ —ç–∫—Ä–∞–Ω–µ –∫–∞—Ä—Ç—ã —Ç–∞–∫–∂–µ —Å–∫—Ä—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª –∫—É–ª—å—Ç–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    const cs = document.querySelector('.cult-symbol');
    const warn = document.querySelector('.warning');
    if (cs) cs.style.display = 'none';
    if (warn) warn.style.display = 'none';

    const pgConfig = appConfig.pentagram || { vertices: [], radius_m: 150 };
    const center = [appConfig.coordinates.lat, appConfig.coordinates.lng];
    const radius = pgConfig.radius_m || 150;
    const vertices = Array.isArray(pgConfig.vertices) ? pgConfig.vertices : [];
    if (vertices.length === 0) {
        console.warn('–ù–µ—Ç –≤–µ—Ä—à–∏–Ω –ø–µ–Ω—Ç–∞–≥—Ä–∞–º–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ');
    }

    // –°–æ–∑–¥–∞—ë–º 5 –≤–Ω–µ—à–Ω–∏—Ö –∏ 5 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–ª–æ—Ç–æ–≤ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ ‚Äî —Å–º–µ—â–µ–Ω—ã –∫ —Ü–µ–Ω—Ç—Ä—É, –ø–æ–≤–µ—Ä–Ω—É—Ç—ã –Ω–∞ ~36¬∞)
    // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–æ—Ç–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö (5 outer + 5 inner)
    // –í—Å–µ–≥–¥–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç—ã –ø–æ —É–≥–ª–∞–º –ø–µ–Ω—Ç–∞–≥—Ä–∞–º–º—ã,
    // —á—Ç–æ–±—ã –±–ª–æ–∫–∏ –Ω–µ –∑–∞–≤–∏—Å–µ–ª–∏ –æ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    let approxOuter, approxInner;
    const computeSlotsByAngles = () => {
        const container = window.__leafletMap && window.__leafletMap.getContainer ? window.__leafletMap.getContainer() : null;
        if (!container) return;
        const rect = container.getBoundingClientRect();
        const cx = rect.width / 2;
        const cy = rect.height / 2;
        const outerRadius = Math.min(rect.width, rect.height) * 0.38; // —á—É—Ç—å –º–µ–Ω—å—à–µ, —á—Ç–æ–±—ã –≤–ª–µ–∑–∞–ª–æ
        const innerFactor = (appConfig.pentagram && appConfig.pentagram.inner_radius_factor) ? appConfig.pentagram.inner_radius_factor : 0.38;
        const innerRadius = outerRadius * innerFactor;

        const clamp = (v, min, max) => Math.max(min, Math.min(max, v));
        const toPercent = (x, y) => {
            const lx = (x / rect.width) * 100;
            const ty = (y / rect.height) * 100;
            // –î–µ—Ä–∂–∏–º —Ç–æ—á–∫–∏ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            return { left: `${clamp(lx, 4, 96)}%`, top: `${clamp(ty, 4, 96)}%` };
        };

        approxOuter = [];
        approxInner = [];
        const haveDnd = Array.isArray(pgConfig.dnd_points) && pgConfig.dnd_points.length >= 10;
        if (haveDnd && window.__leafletMap) {
            // 0..4 –≤–Ω–µ—à–Ω–∏–µ, 5..9 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ
            const map = window.__leafletMap;
            for (let i = 0; i < 5; i++) {
                const pOuter = pgConfig.dnd_points[i];
                const pInner = pgConfig.dnd_points[i + 5];
                const ptOuter = map.latLngToContainerPoint([pOuter.lat, pOuter.lng]);
                const ptInner = map.latLngToContainerPoint([pInner.lat, pInner.lng]);
                approxOuter.push(toPercent(ptOuter.x, ptOuter.y));
                approxInner.push(toPercent(ptInner.x, ptInner.y));
            }
        } else {
            const defaultAngles = [-90, -18, 54, 126, 198];
            const useDefault = (!vertices || vertices.length < 5) || vertices.every(v => !v || v.angle_deg === undefined || Number(v.angle_deg) === 0);
            for (let i = 0; i < 5; i++) {
                const baseAng = useDefault ? defaultAngles[i] : ((vertices[i] && typeof vertices[i].angle_deg === 'number') ? vertices[i].angle_deg : defaultAngles[i]);
                const angOuter = (baseAng - 90) * Math.PI / 180; // —Å–º–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã -90 –±—ã–ª –Ω–∞–≤–µ—Ä—Ö—É
                const ox = cx + outerRadius * Math.cos(angOuter);
                const oy = cy + outerRadius * Math.sin(angOuter);
                approxOuter.push(toPercent(ox, oy));

                const angInner = ((baseAng + 36) - 90) * Math.PI / 180; // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–º–µ—â–µ–Ω—ã –Ω–∞ 36¬∞
                const ix = cx + innerRadius * Math.cos(angInner);
                const iy = cy + innerRadius * Math.sin(angInner);
                approxInner.push(toPercent(ix, iy));
            }
        }
    };
    computeSlotsByAngles();
    // (approxOuter/approxInner —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –≤—ã—à–µ). –ï—Å–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, fallback –Ω–∞ –¥–µ—Ñ–æ–ª—Ç.
    if (!approxOuter || approxOuter.length !== 5 || !approxInner || approxInner.length !== 5) {
        approxOuter = [
            { left: '50%', top: '5%' },
            { left: '94%', top: '24%' },
            { left: '84%', top: '93%' },
            { left: '16%', top: '93%' },
            { left: '6%', top: '24%' }
        ];
        approxInner = [
            { left: '50%', top: '28%' },
            { left: '74%', top: '40%' },
            { left: '62%', top: '76%' },
            { left: '38%', top: '76%' },
            { left: '26%', top: '40%' }
        ];
    }

    // –°–æ–∑–¥–∞—ë–º DOM-—Å–ª–æ—Ç—ã
    slotsLayer.innerHTML = '';
    // –ü–∞—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤: –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∑–Ω–∞–∫ –¥–ª—è –≤–Ω–µ—à–Ω–µ–π/–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ç–æ—á–∫–∏, –Ω–æ —Ä–∞–∑–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    const pairSymbols = ['‚ú¶','‚ú™','‚ò∏','‚ò¨','‚òØ'];
    const outerColors = ['#ff2b2b','#ff3838','#e61e1e','#ff4d4d','#d91c1c'];
    const innerColors = ['#111111','#222222','#000000','#2b2b2b','#1a1a1a'];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —à–∏—Ñ—Ä–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–º–µ—Ä–æ–≤ –∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
    fetch('/api/cipher/type')
        .then(response => response.json())
        .then(async (data) => {
            const showNumbers = data.cipher_type && data.cipher_type !== 'universal';
            const sequentialMode = data.cipher_type === 'registered';
            let initialStep = null;
            if (sequentialMode) {
                try {
                    const pr = await fetch('/api/progress');
                    if (pr.ok) {
                        const pj = await pr.json();
                        if (pj && pj.ok && typeof pj.step === 'number') initialStep = pj.step;
                    }
                } catch (e) {
                    console.error('Error loading progress', e);
                }
            }
            createSlotsWithNumbers(showNumbers, sequentialMode, initialStep);
        })
        .catch((error) => {
            console.error('Error fetching cipher type:', error);
            createSlotsWithNumbers(false, false);
        });
    
    function createSlotsWithNumbers(showNumbers, sequentialMode, initialStep) {
        // –û—á–∏—â–∞–µ–º —Å–ª–æ—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        slotsLayer.innerHTML = '';
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ç–æ—á–µ–∫
        const pointOrder = appConfig.point_order || [];
        const hasCustomOrder = pointOrder.length === 10;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: —à–∞–≥ 0..9 (0-4 –≤–Ω–µ—à–Ω–∏–µ, 5-9 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ)
        if (sequentialMode) {
            if (typeof initialStep === 'number' && initialStep >= 0 && initialStep <= 10) {
                window.__seqStep = Math.min(initialStep, 10);
            } else {
                window.__seqStep = 0;
            }
        } else {
            window.__seqStep = null;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º
        const slotsToCreate = hasCustomOrder ? pointOrder : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        
        for (let orderIndex = 0; orderIndex < slotsToCreate.length; orderIndex++) {
            const pointIndex = slotsToCreate[orderIndex];
            const isOuter = pointIndex < 5;
            const slotIndex = isOuter ? pointIndex : (pointIndex - 5);
            
            const slot = document.createElement('div');
            slot.className = 'dnd-slot';
            slot.dataset.index = String(slotIndex);
            slot.dataset.type = isOuter ? 'outer' : 'inner';
            slot.dataset.pointIndex = String(pointIndex);
            slot.dataset.orderIndex = String(orderIndex);
            
            const pos = isOuter ? approxOuter[slotIndex] : approxInner[slotIndex];
            slot.style.left = pos.left;
            slot.style.top = pos.top;
            
            const btn = document.createElement('button');
            btn.className = 'slot-btn';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –Ω–µ-—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —à–∏—Ñ—Ä–æ–≤, –∏–Ω–∞—á–µ —Å–∏–º–≤–æ–ª
            let displayText;
            if (showNumbers) {
                if (hasCustomOrder) {
                    displayText = orderIndex + 1; // –ù–æ–º–µ—Ä –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                } else {
                    displayText = pointIndex + 1; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–æ–º–µ—Ä
                }
            } else {
                displayText = pairSymbols[slotIndex % pairSymbols.length];
            }
            
            btn.textContent = displayText;
            btn.style.color = isOuter ? outerColors[slotIndex % outerColors.length] : innerColors[slotIndex % innerColors.length];
            btn.setAttribute('aria-label', `${isOuter ? '–í–µ—Ä—à–∏–Ω–∞' : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–µ—Ä—à–∏–Ω–∞'} ${slotIndex + 1}`);
            
            btn.onclick = () => {
                if (sequentialMode && window.__seqStep !== null) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —ç—Ç—É —Ç–æ—á–∫—É –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ä—è–¥–∫–µ
                    if (hasCustomOrder) {
                        // –í –∫–∞—Å—Ç–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ orderIndex
                        if (window.__seqStep !== orderIndex) return;
                    } else {
                        // –í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ pointIndex
                        if (isOuter) {
                            if (window.__seqStep !== pointIndex) return;
                        } else {
                            if (window.__seqStep !== (pointIndex)) return;
                        }
                    }
                }
                promptWordForSlot(slotIndex, isOuter ? 'outer' : 'inner', vertices);
            };
            
            slot.appendChild(btn);
            slotsLayer.appendChild(slot);
        }

        // –í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä—ã–≤–∞–µ–º
        if (sequentialMode && window.__seqStep !== null) {
            if (typeof window.updateSequentialVisibility === 'function') {
                window.updateSequentialVisibility();
            }
            // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—á–∫–∏
            if (typeof window.updateCurrentPointCoordinates === 'function') {
                window.updateCurrentPointCoordinates(vertices);
            }
            // –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —É–∂–µ —Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ (–µ—Å–ª–∏ step>0)
            try {
                const solvedCount = Math.min(window.__seqStep, 10);
                for (let s = 0; s < solvedCount; s++) {
                    const isOuter = s < 5;
                    const idx = isOuter ? s : (s - 5);
                    const el = document.querySelector(`.dnd-slot[data-index="${idx}"][data-type="${isOuter ? 'outer' : 'inner'}"]`);
                    if (el && !el.classList.contains('ok')) {
                        const btn = el.querySelector('button');
                        if (btn) btn.classList.add('solved');
                        el.classList.add('ok');
                        placeVertexAndConnect(idx, vertices, isOuter ? 'outer' : 'inner');
                    }
                }
            } catch (e) {
                console.error('Error applying solved vertices', e);
            }
        }
    }
    
    window.updateSequentialVisibility = function() {
        const step = window.__seqStep;
        if (step === null || step === undefined) return;
        
        const pointOrder = appConfig.point_order || [];
        const hasCustomOrder = pointOrder.length === 10;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–∏–º—ã–º–∏ —É–∂–µ —Ä–µ—à—ë–Ω–Ω—ã–µ
        const allSlots = Array.from(document.querySelectorAll('.dnd-slot'));
        allSlots.forEach(s => {
            const btn = s.querySelector('button');
            if (s.classList.contains('ok')) {
                // –†–µ—à—ë–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤–∏–¥–∏–º—ã–º–∏, –∫–Ω–æ–ø–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞
                s.style.visibility = 'visible';
                if (btn) btn.disabled = true;
            } else {
                if (btn) btn.disabled = true;
                s.style.visibility = 'hidden';
            }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
        if (hasCustomOrder) {
            // –í –∫–∞—Å—Ç–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏—â–µ–º —Å–ª–æ—Ç –ø–æ orderIndex
            const curr = document.querySelector(`.dnd-slot[data-order-index="${step}"]`);
            if (curr) {
                curr.style.visibility = 'visible';
                const btn = curr.querySelector('button');
                if (btn) btn.disabled = false;
            }
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        if (step < 5) {
            const sel = `.dnd-slot[data-index="${step}"][data-type="outer"]`;
            const curr = document.querySelector(sel);
            if (curr) {
                curr.style.visibility = 'visible';
                const btn = curr.querySelector('button');
                if (btn) btn.disabled = false;
            }
        } else {
            const innerIdx = step - 5;
            const sel = `.dnd-slot[data-index="${innerIdx}"][data-type="inner"]`;
            const curr = document.querySelector(sel);
            if (curr) {
                curr.style.visibility = 'visible';
                const btn = curr.querySelector('button');
                if (btn) btn.disabled = false;
                }
            }
        }
    }

    window.updateCurrentPointCoordinates = function(vertices) {
        const step = window.__seqStep;
        if (step === null || step === undefined) return;
        const mapCoords = document.getElementById('map-coordinates');
        if (!mapCoords) return;
        
        const pointOrder = appConfig.point_order || [];
        const hasCustomOrder = pointOrder.length === 10;
        
        let pointIndex;
        if (hasCustomOrder) {
            // –í –∫–∞—Å—Ç–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –±–µ—Ä–µ–º —Ç–æ—á–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ –ø–æ—Ä—è–¥–∫–µ
            pointIndex = pointOrder[step];
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            pointIndex = step;
        }
        
        const isOuter = pointIndex < 5;
        const idx = isOuter ? pointIndex : (pointIndex - 5);
        const center = [appConfig.coordinates.lat, appConfig.coordinates.lng];
        const baseRadius = (appConfig.pentagram && appConfig.pentagram.radius_m) ? appConfig.pentagram.radius_m : 150;
        const innerFactor = (appConfig.pentagram && appConfig.pentagram.inner_radius_factor) ? appConfig.pentagram.inner_radius_factor : 0.38;
        const dnd = (appConfig.pentagram && Array.isArray(appConfig.pentagram.dnd_points) && appConfig.pentagram.dnd_points.length >= 10) ? appConfig.pentagram.dnd_points : null;
        let lat, lng;
        if (dnd) {
            const p = dnd[pointIndex];
            lat = p.lat; lng = p.lng;
        } else {
            const defaultAngles = [-90, -18, 54, 126, 198];
            const v = vertices[idx] || {};
            const useDefault = (!vertices || vertices.length < 5) || vertices.every(x => !x || x.angle_deg === undefined || Number(x.angle_deg) === 0);
            const baseAng = useDefault ? defaultAngles[idx] : (v.angle_deg || 0);
            const angle = baseAng + (isOuter ? 0 : 36);
            const r = isOuter ? baseRadius : Math.max(10, Math.floor(baseRadius * innerFactor));
            const pt = offsetLatLng(center, r, angle);
            lat = pt[0]; lng = pt[1];
        }
        mapCoords.classList.remove('hidden');
        mapCoords.innerHTML = `üìç –¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞: <span class="coords-highlight">${lat.toFixed(6)}, ${lng.toFixed(6)}</span>`;
    }

    // –ë–∞–Ω–∫ —Å–ª–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∫–Ω–æ–ø–æ—á–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ
    if (bank) bank.style.display = 'none';

    // –í –∫–Ω–æ–ø–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ—Ç DnD –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã/—ç–∫—Ä–∞–Ω–∞
    const reposition = () => {
        computeSlotsByAngles();
        if (approxOuter && approxInner) {
            for (let i = 0; i < 5; i++) {
                const o = document.querySelector(`.dnd-slot[data-index="${i}"][data-type="outer"]`);
                if (o && approxOuter[i]) {
                    o.style.left = approxOuter[i].left;
                    o.style.top = approxOuter[i].top;
                }
                const inn = document.querySelector(`.dnd-slot[data-index="${i}"][data-type="inner"]`);
                if (inn && approxInner[i]) {
                    inn.style.left = approxInner[i].left;
                    inn.style.top = approxInner[i].top;
                }
            }
        }
    };
    window.addEventListener('resize', reposition);
    window.addEventListener('orientationchange', reposition);
    if (window.__leafletMap) {
        window.__leafletMap.on('resize', reposition);
    }
    setTimeout(reposition, 200);
}

function promptWordForSlot(idx, type, vertices) {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ç–æ—á–µ–∫
    const pointOrder = appConfig.point_order || [];
    const hasCustomOrder = pointOrder.length === 10;
    
    let actualVertexIndex;
    if (hasCustomOrder) {
        // –í –∫–∞—Å—Ç–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏, –∫–∞–∫–∞—è –≤–µ—Ä—à–∏–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —Å–ª–æ—Ç—É
        const currentStep = window.__seqStep || 0;
        const pointIndex = pointOrder[currentStep];
        actualVertexIndex = (type === 'outer') ? pointIndex : (pointIndex - 5);
    } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        actualVertexIndex = idx;
    }
    
    const v = vertices[actualVertexIndex];
    const expected = (type === 'outer') ? (v.words[0] || '') : (v.words[1] || '');
    const val = window.prompt('–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –¥–ª—è –≤–µ—Ä—à–∏–Ω—ã:');
    if (!val) return;
    if (val.trim().toLowerCase() === expected.toLowerCase()) {
        const slot = document.querySelector(`.dnd-slot[data-index="${idx}"][data-type="${type}"]`);
        if (slot) {
            const btn = slot.querySelector('button');
            if (btn) btn.classList.add('solved');
            slot.classList.add('ok');
        }
        placeVertexAndConnect(idx, vertices, type);
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É
        if (window.__seqStep !== null && window.__seqStep !== undefined) {
            const pointOrder = appConfig.point_order || [];
            const hasCustomOrder = pointOrder.length === 10;
            
            if (hasCustomOrder) {
                // –í –∫–∞—Å—Ç–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ
                const currentPointInOrder = pointOrder[window.__seqStep];
                const currentPointIndex = (type === 'outer') ? idx : (idx + 5);
                if (currentPointIndex === currentPointInOrder) {
                    window.__seqStep = window.__seqStep + 1; // —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                }
            } else {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            if (type === 'outer') {
                // –æ–∂–∏–¥–∞–µ–º idx == __seqStep (0..4)
                if (window.__seqStep === idx) {
                    window.__seqStep = window.__seqStep + 1; // —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
                }
            } else {
                // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ: —à–∞–≥–∏ 5..9
                if (window.__seqStep === (idx + 5)) {
                    window.__seqStep = window.__seqStep + 1;
                    }
                }
            }
            if (window.__seqStep <= 9) {
                if (typeof window.updateSequentialVisibility === 'function') {
                    window.updateSequentialVisibility();
                }
                if (typeof window.updateCurrentPointCoordinates === 'function') {
                    window.updateCurrentPointCoordinates(vertices);
                }
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                try {
                    fetch('/api/progress', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ step: window.__seqStep })
                    });
                } catch (e) { /* ignore */ }
            } else {
                // –≤—Å–µ 10 –æ—Ç–∫—Ä—ã—Ç—ã ‚Üí –ø–µ—Ä–µ—Ö–æ–¥
                if (!__finalTransitionTriggered) {
                    __finalTransitionTriggered = true;
                    setTimeout(() => {
                        fadeToGoldThen(() => { window.location.href = '/temple'; });
                    }, 800);
                }
            }
        } else {
            checkAllVerticesClosed(vertices);
        }
    } else {
        alert('–ù–µ–≤–µ—Ä–Ω–æ');
    }
}

// –†–∏—Å—É–µ–º –≤–µ—Ä—à–∏–Ω—É (—Ç–æ—á–∫—É) –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –∑–≤–µ–∑–¥—ã —Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã–º–∏
const __placedVerticesOuter = new Set();
const __placedVerticesInner = new Set();
let __finalTransitionTriggered = false;
let __starPolyline = null;
function placeVertexAndConnect(idx, vertices, type) {
    const map = findLeafletMapInstance();
    if (!map) return;
    const center = [appConfig.coordinates.lat, appConfig.coordinates.lng];
    const baseRadius = (appConfig.pentagram && appConfig.pentagram.radius_m) ? appConfig.pentagram.radius_m : 150;
    const innerFactor = (appConfig.pentagram && appConfig.pentagram.inner_radius_factor) ? appConfig.pentagram.inner_radius_factor : 0.38;
    const dnd = (appConfig.pentagram && Array.isArray(appConfig.pentagram.dnd_points) && appConfig.pentagram.dnd_points.length >= 10) ? appConfig.pentagram.dnd_points : null;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ç–æ—á–µ–∫
    const pointOrder = appConfig.point_order || [];
    const hasCustomOrder = pointOrder.length === 10;
    
    let actualVertexIndex;
    if (hasCustomOrder) {
        // –í –∫–∞—Å—Ç–æ–º–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏, –∫–∞–∫–∞—è –≤–µ—Ä—à–∏–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —Å–ª–æ—Ç—É
        const currentStep = window.__seqStep || 0;
        const pointIndex = pointOrder[currentStep];
        actualVertexIndex = (type === 'outer') ? pointIndex : (pointIndex - 5);
    } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        actualVertexIndex = idx;
    }
    
    const v = vertices[actualVertexIndex];
    const isOuter = (type === 'outer');
    const useRadius = isOuter ? baseRadius : Math.max(10, Math.floor(baseRadius * innerFactor));
    const defaultAngles = [-90, -18, 54, 126, 198];
    const useDefault = (!vertices || vertices.length < 5) || vertices.every(x => !x || x.angle_deg === undefined || Number(x.angle_deg) === 0);
    let latlng;
    if (dnd) {
        const pointIndex = hasCustomOrder ? pointOrder[window.__seqStep || 0] : ((type === 'outer') ? idx : (idx + 5));
        const p = dnd[pointIndex];
        latlng = L.latLng(p.lat, p.lng);
    } else {
        const baseAngle = useDefault ? defaultAngles[actualVertexIndex] : (v.angle_deg || 0);
        const angle = baseAngle + (isOuter ? 0 : 36);
        const pt = offsetLatLng(center, useRadius, angle);
        latlng = L.latLng(pt[0], pt[1]);
    }
    L.circleMarker(latlng, { radius: isOuter ? 9 : 8, color: '#000000', fillColor: isOuter ? '#ff2b2b' : '#111111', fillOpacity: 0.95, weight: 3 }).addTo(map);

    if (type === 'outer') {
        __placedVerticesOuter.add(idx);
        // –û–±–Ω–æ–≤–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É –∑–≤–µ–∑–¥—ã (0-2-4-1-3-0), –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö
        const order = [0, 2, 4, 1, 3, 0];
        const available = order.filter((i) => __placedVerticesOuter.has(i));
        if (available.length >= 2) {
            const points = available.map(i => {
                if (dnd) {
                    const p = dnd[i];
                    return L.latLng(p.lat, p.lng);
                } else {
                    const vi = vertices[i];
                    const baseAng = useDefault ? defaultAngles[i] : (vi.angle_deg || 0);
                    const p = offsetLatLng(center, baseRadius, baseAng);
                    return L.latLng(p[0], p[1]);
                }
            });
            if (available.length >= 3) points.push(points[0]);
            if (__starPolyline) {
                __starPolyline.setLatLngs(points);
            } else {
                __starPolyline = L.polyline(points, { color: '#ff1a1a', weight: 4, opacity: 1 }).addTo(map);
            }
        }
            } else {
        __placedVerticesInner.add(idx);
    }
}

function checkAllVerticesClosed(vertices) {
    if (__placedVerticesOuter.size === 5 && __placedVerticesInner.size === 5 && !__finalTransitionTriggered) {
        __finalTransitionTriggered = true;
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —Å –ø–ª–∞–≤–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º –≤ –∑–æ–ª–æ—Ç–æ
        setTimeout(() => {
            fadeToGoldThen(() => {
                window.location.href = '/temple';
            });
        }, 2000);
    }
}

function checkCompletionAndDrawPentagram(vertices) {
    const allOk = Array.from(document.querySelectorAll('.dnd-slot')).every(s => s.classList.contains('ok'));
    if (!allOk) return;
    // –ü–æ—ç—Ç–∞–ø–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è: –ª—É—á–∏ –∫ —Ü–µ–Ω—Ç—Ä—É, –∑–∞—Ç–µ–º –∑–≤–µ–∑–¥–∞
    const targetLat = appConfig.coordinates.lat;
    const targetLng = appConfig.coordinates.lng;
    const map = findLeafletMapInstance();
    if (!map) return;

    const center = [targetLat, targetLng];
    const radius = (appConfig.pentagram && appConfig.pentagram.radius_m) ? appConfig.pentagram.radius_m : 150;
    const dnd = (appConfig.pentagram && Array.isArray(appConfig.pentagram.dnd_points) && appConfig.pentagram.dnd_points.length >= 10) ? appConfig.pentagram.dnd_points : null;
    let latLngs;
    if (dnd) {
        latLngs = [0,1,2,3,4].map(i => L.latLng(dnd[i].lat, dnd[i].lng));
    } else {
        const defaultAngles = [-90, -18, 54, 126, 198];
        const useDefault = (!vertices || vertices.length < 5) || vertices.every(v => !v || v.angle_deg === undefined || Number(v.angle_deg) === 0);
        const points = vertices.map((v, i) => {
            const ang = useDefault ? defaultAngles[i] : (v.angle_deg || 0);
            return offsetLatLng(center, radius, ang);
        });
        latLngs = points.map(p => L.latLng(p[0], p[1]));
    }
    const order = [0, 2, 4, 1, 3, 0];
    const star = order.map(i => latLngs[i]);

    // 1) –õ—É—á–∏ –∏–∑ –≤–µ—Ä—à–∏–Ω –≤ —Ü–µ–Ω—Ç—Ä (–º–µ–¥–ª–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)
    const rays = [];
    latLngs.forEach((p) => {
        const r = L.polyline([p, p], { color: '#FFD700', weight: 2, opacity: 0.0 }).addTo(map);
        rays.push(r);
    });
    let rIdx = 0;
    const rayTimer = setInterval(() => {
        if (rIdx >= rays.length) {
            clearInterval(rayTimer);
            // 2) –ü–æ—Å–ª–µ –ª—É—á–µ–π ‚Äî –∑–≤–µ–∑–¥–∞, –±–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–æ
            drawStarSlow(map, star, center);
            return;
        }
        const ray = rays[rIdx];
        ray.setStyle({ opacity: 0.9 });
        ray.setLatLngs([latLngs[rIdx], L.latLng(center[0], center[1])]);
        rIdx++;
    }, 600); // –º–µ–¥–ª–µ–Ω–Ω–µ–µ
}

function drawStarSlow(map, star, center) {
    const base = L.polyline(star, { color: '#DAA520', weight: 2, opacity: 0.4 }).addTo(map);
    const segs = [];
    for (let i = 0; i < star.length - 1; i++) {
        const seg = L.polyline([star[i], star[i]], { color: '#FFD700', weight: 4, opacity: 0.0 }).addTo(map);
        segs.push(seg);
    }
    let idx = 0;
    const timer = setInterval(() => {
        if (idx >= segs.length) {
            clearInterval(timer);
            // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –ø–µ—Ä–µ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç checkAllVerticesClosed
            return;
        }
        const seg = segs[idx];
        seg.setStyle({ opacity: 0.95 });
        seg.setLatLngs([star[idx], star[idx + 1]]);
        idx++;
    }, 450); // –º–µ–¥–ª–µ–Ω–Ω–µ–µ
}

// –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –•—Ä–∞–º–∞ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

function drawTempleMarkerAndPopup() {
    const map = findLeafletMapInstance();
    if (!map) return;
    const targetLat = appConfig.coordinates.lat;
    const targetLng = appConfig.coordinates.lng;

    const goldMarkerHtml = `
        <div class="gold-marker-pulse">
            <div class="pulse-ring pulse-ring-1"></div>
            <div class="pulse-ring pulse-ring-2"></div>
            <div class="pulse-ring pulse-ring-3"></div>
            <div class="gold-marker-icon">
                <div class="marker-x-map">
                    <div class="x-line-map line-1-map"></div>
                    <div class="x-line-map line-2-map"></div>
                </div>
                <div class="marker-star-map">‚ú¶</div>
            </div>
        </div>
    `;

    const goldIcon = L.divIcon({
        className: 'custom-gold-marker',
        html: goldMarkerHtml,
        iconSize: [80, 80],
        iconAnchor: [40, 40]
    });
    const marker = L.marker([targetLat, targetLng], { icon: goldIcon, title: '–•–†–ê–ú –ì–†–û–•–ê' }).addTo(map);
    // –í–º–µ—Å—Ç–æ popup ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ –∫–ª–∏–∫—É –Ω–∞ –º–∞—Ä–∫–µ—Ä
    marker.on('click', () => {
        showFinalOverlay();
    });

    // –£–±–∏—Ä–∞–µ–º CTA –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
    const cta = document.getElementById('center-cta');
    if (cta) cta.remove();
    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—Ä–∞—Ç
    const coordsElement = document.getElementById('map-coordinates');
    if (coordsElement) coordsElement.classList.add('hidden');

    // –û–±–µ—Å–ø–µ—á–∏–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ä–∞: –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏–º –∫–ª–∏–∫–∏ –ø–æ —Å–ª–æ—Ç–∞–º
    const slotsLayer = document.getElementById('dnd-slots');
    if (slotsLayer) slotsLayer.style.pointerEvents = 'none';
}

function showFinalOverlay() {
    const photoUrl = appConfig && appConfig.temple && appConfig.temple.photo_url ? appConfig.temple.photo_url : '';
    const photoCaption = appConfig && appConfig.temple && appConfig.temple.photo_caption ? appConfig.temple.photo_caption : '';
    const finalMsg = appConfig && appConfig.temple && appConfig.temple.final_message ? appConfig.temple.final_message : '';
    // –°–æ–∑–¥–∞–¥–∏–º –∏–ª–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º overlay
    let overlay = document.getElementById('final-overlay');
    if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = 'final-overlay';
        overlay.className = 'final-overlay';
        const box = document.createElement('div');
        box.className = 'final-box';
        box.innerHTML = `
            <div style="color:#B8860B; font-weight:bold; margin-bottom:8px;">‚ú¶ –•–†–ê–ú –ì–†–û–•–ê ‚ú¶</div>
            ${photoUrl ? `<img class=\"final-photo\" src=\"${photoUrl}\" alt=\"Temple Photo\">` : ''}
            ${photoCaption ? `<div class=\"final-caption\">${photoCaption}</div>` : ''}
            ${finalMsg ? `<div class=\"final-message\">${finalMsg}</div>` : ''}
            <button id="final-close-btn" class="final-close-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
        `;
        overlay.appendChild(box);
        document.body.appendChild(overlay);
        const closeBtn = overlay.querySelector('#final-close-btn');
        if (closeBtn) closeBtn.onclick = () => overlay.remove();
    }
}

function fadeToGoldThen(cb) {
    const overlay = document.createElement('div');
    overlay.style.position = 'fixed';
    overlay.style.inset = '0';
    overlay.style.background = 'rgba(218, 165, 32, 0)';
    overlay.style.pointerEvents = 'none';
    overlay.style.zIndex = '40000';
    overlay.style.transition = 'background 1s ease-in';
    document.body.appendChild(overlay);
    // –ø–ª–∞–≤–Ω–æ –¥–æ –∑–æ–ª–æ—Ç–æ–≥–æ
    requestAnimationFrame(() => {
        overlay.style.background = 'rgba(218, 165, 32, 0.7)';
    });
    setTimeout(() => {
        try { cb && cb(); } finally {
            // —É–±—Ä–∞—Ç—å –¥—ã–º–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π ‚Äî –Ω–µ —É–±–∏—Ä–∞–µ–º —Å—Ä–∞–∑—É
            setTimeout(() => overlay.remove(), 400);
        }
    }, 1000);
}

function findLeafletMapInstance() {
    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã Leaflet, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ initTreasureMap
    const mapContainer = document.querySelector('#real-map .leaflet-container');
    // Leaflet –Ω–µ —Ö—Ä–∞–Ω–∏—Ç —Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ –≤ DOM –Ω–∞—Ç–∏–≤–Ω–æ, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞–∫: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    return window.__leafletMap || null;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤, –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ –∑–æ–ª–æ—Ç—ã—Ö —á–∞—Å—Ç–∏—Ü –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    await loadConfig();
    
    // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö, –≥–¥–µ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    if (document.getElementById('haunting-figures')) {
        createHauntingFigures();
    }
    if (document.getElementById('floating-logos')) {
        createFloatingLogos();
    }
    if (document.getElementById('gold-particles')) {
        createGoldParticles();
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
    if (appConfig && appConfig.debug) {
        injectDebugControls();
    }

    // –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —è–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã DnD, –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∏ –∑–∞–≥–∞–¥–∫—É
    const gate = document.getElementById('pentagram-gate');
    const bank = document.getElementById('dnd-bank');
    const slots = document.getElementById('dnd-slots');
    if (gate && bank && slots) {
        // –ù–µ –º–µ–Ω—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å, –Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç–∏–ª–∏ –Ω–µ —Å–∫—Ä—ã–≤–∞—é—Ç –ø–æ z-index
        bank.style.zIndex = '1500';
        slots.style.zIndex = '1000';
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DnD –∏ –∫–∞—Ä—Ç—É —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ (–ø–æ—Å–ª–µ –∑–∞–≥–∞–¥–∫–∏)
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–µ–Ω—Ç–∞–≥—Ä–∞–º–º—ã –≤ –∞–¥–º–∏–Ω–∫–µ
    const editor = document.getElementById('editor-map');
    if (editor) {
        initPentagramEditor();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—è–¥–∫–∞ —Ç–æ—á–µ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ
    const orderSection = document.getElementById('btn-set-order');
    if (orderSection) {
        // –ñ–¥–µ–º, –ø–æ–∫–∞ DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
        setTimeout(() => {
            initPointOrderManager();
        }, 100);
    }
    // –ü–æ—Å–ª–µ /cipher –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–æ–ª–æ—Ç—É—é –¥—ã–º–∫—É, –∑–∞—Ç–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    const mainContainer = document.getElementById('main-container');
    if (mainContainer) {
        const overlay = document.createElement('div');
        overlay.style.position = 'fixed';
        overlay.style.inset = '0';
        overlay.style.background = 'rgba(218, 165, 32, 0.7)';
        overlay.style.pointerEvents = 'none';
        overlay.style.zIndex = '40000';
        overlay.style.transition = 'background 0.9s ease-out';
        document.body.appendChild(overlay);
        
        // –ü–ª–∞–≤–Ω–æ —É–±–∏—Ä–∞–µ–º –¥—ã–º–∫—É, –æ—Å—Ç–∞–≤–ª—è—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ (–∑–∞–º–æ–∫ ‚Üí –∫–æ–∞–Ω ‚Üí –≤—Ä–∞—Ç–∞)
        requestAnimationFrame(() => {
            overlay.style.background = 'rgba(218, 165, 32, 0)';
        });
        setTimeout(() => overlay.remove(), 950);
    }
});

function injectDebugControls() {
    const dbg = document.createElement('div');
    dbg.style.position = 'fixed';
    dbg.style.bottom = '20px';
    dbg.style.right = '20px';
    dbg.style.zIndex = '20000';
    dbg.style.display = 'flex';
    dbg.style.gap = '10px';
    dbg.style.background = 'rgba(0,0,0,0.6)';
    dbg.style.border = '2px solid #B8860B';
    dbg.style.padding = '10px';

    const mkBtn = (label, handler) => {
        const b = document.createElement('button');
        b.textContent = label;
        b.style.cursor = 'pointer';
        b.style.background = 'linear-gradient(135deg, #B8860B 0%, #8B7355 100%)';
        b.style.border = '1px solid #DAA520';
        b.style.color = '#FFD700';
        b.style.padding = '6px 10px';
        b.style.fontFamily = 'Cinzel, serif';
        b.onclick = handler;
        return b;
    };

    const btnLock = mkBtn('–≠–∫—Ä–∞–Ω –∑–∞–º–∫–∞', () => {
        document.getElementById('lock-screen').style.display = 'flex';
        document.getElementById('main-container').style.display = 'none';
    });
    const btnMain = mkBtn('–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω', () => {
        document.getElementById('lock-screen').style.display = 'none';
        document.getElementById('main-container').style.display = 'block';
        document.getElementById('secret-section').classList.add('hidden');
    });
    const btnSecret = mkBtn('–≠–∫—Ä–∞–Ω –∫–∞—Ä—Ç—ã', () => {
        document.getElementById('lock-screen').style.display = 'none';
        document.getElementById('main-container').style.display = 'block';
        document.getElementById('secret-section').classList.remove('hidden');
        setTimeout(() => initTreasureMap(), 200);
    });

    dbg.appendChild(btnLock);
    dbg.appendChild(btnMain);
    dbg.appendChild(btnSecret);
    document.body.appendChild(dbg);
}

// --- Pentagram Editor (admin) ---
function initPentagramEditor() {
    const center = [appConfig.coordinates.lat, appConfig.coordinates.lng];
    const map = L.map('editor-map', {
        center,
        zoom: 15,
        zoomControl: true,
        attributionControl: false
    });
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19 }).addTo(map);

    const outerMarkers = [];
    const innerMarkers = [];
    let mode = 'center';
    const makeDotIcon = (color, number = '') => L.divIcon({ 
        className: '', 
        html: `<div style="position:relative; width:20px;height:20px;border:2px solid #000;border-radius:50%;background:${color}; display:flex;align-items:center;justify-content:center;font-size:10px;font-weight:bold;color:#fff;text-shadow:1px 1px 1px #000;">${number}</div>` 
    });
    let centerMarker = L.marker(center, { draggable: true, icon: L.divIcon({ className:'', html:`<div style="width:16px;height:16px;border:2px solid #B8860B;border-radius:50%;background:rgba(255,215,0,0.4);"></div>` }) }).addTo(map);

    const btnCenter = document.getElementById('btn-editor-center');
    const btnLoad = document.getElementById('btn-editor-load');
    const btnClear = document.getElementById('btn-editor-clear');
    const btnCalc = document.getElementById('btn-editor-calc');
    const btnApply = document.getElementById('btn-editor-apply');

    const setMode = (m) => { mode = m; };
    if (btnCenter) btnCenter.onclick = () => setMode('center');
    // –£–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º—ã —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∏ —Ä–∞—Å—á—ë—Ç
    if (btnClear) btnClear.onclick = () => {
        outerMarkers.forEach(m => map.removeLayer(m));
        innerMarkers.forEach(m => map.removeLayer(m));
        outerMarkers.length = 0;
        innerMarkers.length = 0;
    };
    if (btnLoad) btnLoad.onclick = () => {
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        btnClear.click();
        const points = [];
        for (let i = 0; i < 10; i++) {
            const latField = document.querySelector(`[name="pg_dnd_lat_${i}"]`);
            const lngField = document.querySelector(`[name="pg_dnd_lng_${i}"]`);
            if (latField && lngField && latField.value && lngField.value) {
                points.push({ lat: parseFloat(latField.value), lng: parseFloat(lngField.value) });
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ç–æ—á–µ–∫
        const pointOrder = appConfig.point_order || [];
        const hasCustomOrder = pointOrder.length === 10;
        
        if (hasCustomOrder) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            pointOrder.forEach((pointIndex, orderIndex) => {
                if (points[pointIndex]) {
                    const p = points[pointIndex];
                    const isOuter = pointIndex < 5;
                    const color = isOuter ? '#ff2b2b' : '#111';
                    const number = orderIndex + 1; // –ù–æ–º–µ—Ä –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                    const marker = L.marker(p, { draggable: true, icon: makeDotIcon(color, number) });
                    marker.addTo(map);
                    if (isOuter) {
                        outerMarkers.push(marker);
                    } else {
                        innerMarkers.push(marker);
                    }
                }
            });
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        points.slice(0,5).forEach((p, i) => outerMarkers.push(L.marker(p, { draggable: true, icon: makeDotIcon('#ff2b2b', i+1) }).addTo(map)));
        points.slice(5,10).forEach((p, i) => innerMarkers.push(L.marker(p, { draggable: true, icon: makeDotIcon('#111', i+1) }).addTo(map)));
        }
    };
    if (btnCalc) btnCalc.onclick = () => {
        // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–∫–∏ –ø–æ —Ç–µ–∫—É—â–∏–º —É–≥–ª–∞–º/—Ä–∞–¥–∏—É—Å—É/—Ü–µ–Ω—Ç—Ä—É
        const centerLatLng = centerMarker.getLatLng();
        const radius = (appConfig.pentagram && appConfig.pentagram.radius_m) ? appConfig.pentagram.radius_m : 150;
        const innerFactor = (appConfig.pentagram && appConfig.pentagram.inner_radius_factor) ? appConfig.pentagram.inner_radius_factor : 0.38;
        let vertices = (appConfig.pentagram && appConfig.pentagram.vertices) ? appConfig.pentagram.vertices : [];
        // –ï—Å–ª–∏ —É–≥–ª—ã –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–≥–ª—ã –ø–µ–Ω—Ç–∞–≥—Ä–∞–º–º—ã
        const defaultAngles = [-90, -18, 54, 126, 198];
        const useDefault = (!vertices || vertices.length < 5) || vertices.every(v => !v || v.angle_deg === undefined || Number(v.angle_deg) === 0);
        if (useDefault) {
            vertices = defaultAngles.map((ang, i) => ({ angle_deg: ang, words: [
                (appConfig.pentagram && appConfig.pentagram.vertices && appConfig.pentagram.vertices[i] && appConfig.pentagram.vertices[i].words && appConfig.pentagram.vertices[i].words[0]) || '',
                (appConfig.pentagram && appConfig.pentagram.vertices && appConfig.pentagram.vertices[i] && appConfig.pentagram.vertices[i].words && appConfig.pentagram.vertices[i].words[1]) || ''
            ] }));
        }
        const toLatLng = (bearingDeg, r) => {
            const pt = offsetLatLng([centerLatLng.lat, centerLatLng.lng], r, bearingDeg);
            return L.latLng(pt[0], pt[1]);
        };
        // –û—á–∏—Å—Ç–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        btnClear.click();
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ç–æ—á–µ–∫
        const pointOrder = appConfig.point_order || [];
        const hasCustomOrder = pointOrder.length === 10;
        
        if (hasCustomOrder) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            pointOrder.forEach((pointIndex, orderIndex) => {
                const isOuter = pointIndex < 5;
                const idx = isOuter ? pointIndex : (pointIndex - 5);
                const v = vertices[idx];
                const ang = (v && typeof v.angle_deg === 'number') ? v.angle_deg : defaultAngles[idx];
                const useRadius = isOuter ? radius : Math.max(10, Math.floor(radius * innerFactor));
                const angle = isOuter ? ang : (ang + 36);
                const marker = L.marker(toLatLng(angle, useRadius), { 
                    draggable: true, 
                    icon: makeDotIcon(isOuter ? '#ff2b2b' : '#111', orderIndex + 1) 
                });
                marker.addTo(map);
                if (isOuter) {
                    outerMarkers.push(marker);
                } else {
                    innerMarkers.push(marker);
                }
            });
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        for (let i = 0; i < 5; i++) {
            const v = vertices[i];
            const ang = (v && typeof v.angle_deg === 'number') ? v.angle_deg : defaultAngles[i];
            outerMarkers.push(L.marker(toLatLng(ang, radius), { draggable: true, icon: makeDotIcon('#ff2b2b', i+1) }).addTo(map));
            innerMarkers.push(L.marker(toLatLng(ang + 36, radius * innerFactor), { draggable: true, icon: makeDotIcon('#111', i+1) }).addTo(map));
            }
        }
    };
    if (btnApply) btnApply.onclick = () => {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã dnd_points –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º (–≤–Ω–µ—à–Ω–∏–µ –ø–æ—Ç–æ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ)
        const points = [];
        outerMarkers.forEach(m => { const p = m.getLatLng(); points.push({lat:p.lat, lng:p.lng}); });
        innerMarkers.forEach(m => { const p = m.getLatLng(); points.push({lat:p.lat, lng:p.lng}); });
        for (let i = 0; i < 10; i++) {
            const p = points[i];
            const latField = document.querySelector(`[name="pg_dnd_lat_${i}"]`);
            const lngField = document.querySelector(`[name="pg_dnd_lng_${i}"]`);
            if (p && latField && lngField) {
                latField.value = p.lat.toFixed(6);
                lngField.value = p.lng.toFixed(6);
            }
            if (!p && latField && lngField) { latField.value=''; lngField.value=''; }
        }
        // –¢–∞–∫–∂–µ –ø–µ—Ä–µ–Ω–µ—Å—ë–º —Ü–µ–Ω—Ç—Ä
        const c = centerMarker.getLatLng();
        const latCenter = document.getElementById('coord_lat');
        const lngCenter = document.getElementById('coord_lng');
        if (latCenter && lngCenter) { latCenter.value = c.lat.toFixed(6); lngCenter.value = c.lng.toFixed(6); }
    };

    const addMarker = (latlng, type) => {
        const color = (type === 'outer') ? '#ff2b2b' : '#111';
        const number = (type === 'outer') ? (outerMarkers.length + 1) : (innerMarkers.length + 1);
        const marker = L.marker(latlng, { draggable: true, icon: makeDotIcon(color, number) });
        marker.addTo(map);
        if (type === 'outer') outerMarkers.push(marker); else innerMarkers.push(marker);
    };

    map.on('click', (e) => {
        if (mode === 'center') {
            centerMarker.setLatLng(e.latlng);
        } else if (mode === 'outer') {
            if (outerMarkers.length < 5) addMarker(e.latlng, 'outer');
        } else if (mode === 'inner') {
            if (innerMarkers.length < 5) addMarker(e.latlng, 'inner');
        }
    });
}

// --- Point Order Manager (admin) ---
function initPointOrderManager() {
    let orderMode = false;
    let currentOrder = [];
    let orderMarkers = [];
    let orderMap = null;
    
    const btnSetOrder = document.getElementById('btn-set-order');
    const btnResetOrder = document.getElementById('btn-reset-order');
    const btnClearOrder = document.getElementById('btn-clear-order');
    const orderStatus = document.getElementById('order-status');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫
    loadCurrentOrder();
    
    if (btnSetOrder) {
        btnSetOrder.onclick = () => {
            if (orderMode) {
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                finishOrderSetting();
            } else {
                // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                startOrderSetting();
            }
        };
    }
    
    if (btnResetOrder) {
        btnResetOrder.onclick = () => {
            resetToDefaultOrder();
        };
    }
    
    if (btnClearOrder) {
        btnClearOrder.onclick = () => {
            clearOrder();
        };
    }
    
    function loadCurrentOrder() {
        fetch('/api/admin/point-order')
            .then(response => response.json())
            .then(data => {
                if (data.ok) {
                    currentOrder = data.order || [];
                    updateOrderStatus();
                }
            })
            .catch(error => {
                console.error('Error loading order:', error);
            });
    }
    
    function startOrderSetting() {
        orderMode = true;
        currentOrder = [];
        orderMarkers = [];
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—è–¥–∫–∞
        createOrderMap();
        
        btnSetOrder.textContent = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É';
        btnSetOrder.style.background = 'rgba(255, 0, 0, 0.6)';
        orderStatus.textContent = '–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Ç–æ—á–∫–∞–º –Ω–∞ –∫–∞—Ä—Ç–µ –≤ –Ω—É–∂–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (1-10)...';
        orderStatus.style.color = '#ff6b6b';
    }
    
    function createOrderMap() {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (orderMap) {
            orderMap.remove();
            orderMap = null;
        }
        
        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        let orderMapContainer = document.getElementById('order-map');
        
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        if (!orderMapContainer) {
            orderMapContainer = document.createElement('div');
            orderMapContainer.id = 'order-map';
            orderMapContainer.style.cssText = 'height: 400px; border: 2px solid #8B7355; margin-top: 20px; display: block;';
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ—Ä—è–¥–∫–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
            const orderSection = Array.from(document.querySelectorAll('h2.section-title')).find(h => 
                h.textContent.includes('üéØ –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–µ–∫')
            );
            
            if (orderSection) {
                const formSection = orderSection.closest('.form-section');
                if (formSection) {
                    formSection.appendChild(orderMapContainer);
                }
            } else {
                // Fallback: –∏—â–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
                const btnSetOrder = document.getElementById('btn-set-order');
                if (btnSetOrder) {
                    const parentSection = btnSetOrder.closest('.form-section');
                    if (parentSection) {
                        parentSection.appendChild(orderMapContainer);
                    }
                }
            }
        }
        
        orderMapContainer.style.display = 'block';
        
        // –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–∏–º—ã–º, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        setTimeout(() => {
            const center = [appConfig.coordinates.lat, appConfig.coordinates.lng];
            orderMap = L.map('order-map', {
                center,
                zoom: 15,
                zoomControl: true,
                attributionControl: false
            });
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19 }).addTo(orderMap);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ 10 —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ
            showAllPointsOnMap();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
            setupOrderMapClickHandler();
        }, 200);
    }
    
    function setupOrderMapClickHandler() {
        if (!orderMap) return;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ - –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        orderMap.off('click'); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        orderMap.on('click', (e) => {
            if (!orderMode) return;
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
            e.originalEvent.stopPropagation();
            
            const clickedPoint = findNearestPoint(e.latlng);
            if (clickedPoint !== null && !currentOrder.includes(clickedPoint)) {
                currentOrder.push(clickedPoint);
                addOrderMarker(clickedPoint, currentOrder.length);
                updateOrderStatus();
                
                if (currentOrder.length === 10) {
                    finishOrderSetting();
                }
            }
        });
    }
    
    function showAllPointsOnMap() {
        const center = [appConfig.coordinates.lat, appConfig.coordinates.lng];
        const pgConfig = appConfig.pentagram || {};
        const dnd = pgConfig.dnd_points;
        const radius = pgConfig.radius_m || 150;
        const innerFactor = pgConfig.inner_radius_factor || 0.38;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ 10 —Ç–æ—á–µ–∫
        for (let i = 0; i < 10; i++) {
            let latlng;
            if (dnd && dnd.length >= 10) {
                const p = dnd[i];
                latlng = L.latLng(p.lat, p.lng);
            } else {
                // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ —É–≥–ª–∞–º
                const isOuter = i < 5;
                const idx = isOuter ? i : (i - 5);
                const defaultAngles = [-90, -18, 54, 126, 198];
                const baseAngle = defaultAngles[idx];
                const angle = baseAngle + (isOuter ? 0 : 36);
                const useRadius = isOuter ? radius : Math.max(10, Math.floor(radius * innerFactor));
                const pt = offsetLatLng(center, useRadius, angle);
                latlng = L.latLng(pt[0], pt[1]);
            }
            
            const color = i < 5 ? '#ff2b2b' : '#111111';
            const marker = L.circleMarker(latlng, {
                radius: 12,
                color: '#000000',
                fillColor: color,
                fillOpacity: 0.8,
                weight: 3
            }).addTo(orderMap);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏
            const label = L.marker(latlng, {
                icon: L.divIcon({
                    className: 'point-label',
                    html: `<div style="background: rgba(255,255,255,0.9); color: #000; border: 1px solid #000; border-radius: 50%; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 12px;">${i + 1}</div>`,
                    iconSize: [20, 20],
                    iconAnchor: [10, 10]
                })
            }).addTo(orderMap);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ –≤ –º–∞—Ä–∫–µ—Ä–µ
            marker.pointIndex = i;
            label.pointIndex = i;
        }
    }
    
    function findNearestPoint(clickedLatLng) {
        if (!orderMap) return null;
        
        let nearestIndex = null;
        let minDistance = Infinity;
        
        // –ò—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
        orderMap.eachLayer(function(layer) {
            if (layer.pointIndex !== undefined) {
                const distance = clickedLatLng.distanceTo(layer.getLatLng());
                if (distance < minDistance && distance < 100) { // 100 –º–µ—Ç—Ä–æ–≤ —Ä–∞–¥–∏—É—Å
                    minDistance = distance;
                    nearestIndex = layer.pointIndex;
                }
            }
        });
        
        return nearestIndex;
    }
    
    function addOrderMarker(pointIndex, orderNumber) {
        const center = [appConfig.coordinates.lat, appConfig.coordinates.lng];
        const pgConfig = appConfig.pentagram || {};
        const dnd = pgConfig.dnd_points;
        const radius = pgConfig.radius_m || 150;
        const innerFactor = pgConfig.inner_radius_factor || 0.38;
        
        let latlng;
        if (dnd && dnd.length >= 10) {
            const p = dnd[pointIndex];
            latlng = L.latLng(p.lat, p.lng);
        } else {
            const isOuter = pointIndex < 5;
            const idx = isOuter ? pointIndex : (pointIndex - 5);
            const defaultAngles = [-90, -18, 54, 126, 198];
            const baseAngle = defaultAngles[idx];
            const angle = baseAngle + (isOuter ? 0 : 36);
            const useRadius = isOuter ? radius : Math.max(10, Math.floor(radius * innerFactor));
            const pt = offsetLatLng(center, useRadius, angle);
            latlng = L.latLng(pt[0], pt[1]);
        }
        
        const marker = L.marker(latlng, {
            icon: L.divIcon({
                className: 'order-marker',
                html: `<div style="background: #FFD700; color: #000; border: 2px solid #000; border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; font-weight: bold; font-size: 12px;">${orderNumber}</div>`,
                iconSize: [24, 24],
                iconAnchor: [12, 12]
            })
        }).addTo(orderMap);
        
        orderMarkers.push(marker);
    }
    
    function finishOrderSetting() {
        if (currentOrder.length !== 10) {
            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ 10 —Ç–æ—á–µ–∫!');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
        saveOrder(currentOrder);
        
        orderMode = false;
        btnSetOrder.textContent = '–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫';
        btnSetOrder.style.background = '';
        orderStatus.textContent = `–ü–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${currentOrder.join(', ')}`;
        orderStatus.style.color = '#4CAF50';
        
        // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –∏ —Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
        if (orderMap) {
            orderMap.remove();
            orderMap = null;
        }
        orderMarkers = [];
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
        const orderMapContainer = document.getElementById('order-map');
        if (orderMapContainer) {
            orderMapContainer.style.display = 'none';
        }
    }
    
    function saveOrder(order) {
        fetch('/api/admin/point-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ order: order })
        })
        .then(response => response.json())
        .then(data => {
            if (data.ok) {
                currentOrder = data.order;
                updateOrderStatus();
            } else {
                alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
        })
        .catch(error => {
            console.error('Error saving order:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞');
        });
    }
    
    function resetToDefaultOrder() {
        const defaultOrder = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        saveOrder(defaultOrder);
    }
    
    function clearOrder() {
        saveOrder([]);
        
        // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –∏ —Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
        if (orderMap) {
            orderMap.remove();
            orderMap = null;
        }
        orderMarkers = [];
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
        const orderMapContainer = document.getElementById('order-map');
        if (orderMapContainer) {
            orderMapContainer.style.display = 'none';
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
        orderMode = false;
        btnSetOrder.textContent = '–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫';
        btnSetOrder.style.background = '';
    }
    
    function updateOrderStatus() {
        if (currentOrder.length === 0) {
            orderStatus.textContent = '–ü–æ—Ä—è–¥–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò–≥—Ä–æ–∫–∏ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–æ—á–∫–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.';
            orderStatus.style.color = '#8B7355';
        } else if (currentOrder.length === 10) {
            orderStatus.textContent = `–ü–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${currentOrder.join(', ')}`;
            orderStatus.style.color = '#4CAF50';
        } else {
            orderStatus.textContent = `–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ ${currentOrder.length}/10 —Ç–æ—á–µ–∫: ${currentOrder.join(', ')}`;
            orderStatus.style.color = '#ff6b6b';
        }
    }
}




